// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
	spaggiari "github.com/zmoog/classeviva/adapters/spaggiari"
)

// LoaderStorer is an autogenerated mock type for the LoaderStorer type
type LoaderStorer struct {
	mock.Mock
}

// Load provides a mock function with given fields:
func (_m *LoaderStorer) Load() (spaggiari.Identity, bool, error) {
	ret := _m.Called()

	var r0 spaggiari.Identity
	if rf, ok := ret.Get(0).(func() spaggiari.Identity); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(spaggiari.Identity)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: _a0
func (_m *LoaderStorer) Store(_a0 spaggiari.Identity) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(spaggiari.Identity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoaderStorer creates a new instance of LoaderStorer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoaderStorer(t testing.TB) *LoaderStorer {
	mock := &LoaderStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
