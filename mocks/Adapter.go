// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
	spaggiari "github.com/zmoog/classeviva/adapters/spaggiari"

	time "time"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// List provides a mock function with given fields:
func (_m *Adapter) List() ([]spaggiari.Grade, error) {
	ret := _m.Called()

	var r0 []spaggiari.Grade
	if rf, ok := ret.Get(0).(func() []spaggiari.Grade); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spaggiari.Grade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgenda provides a mock function with given fields: since, until
func (_m *Adapter) ListAgenda(since time.Time, until time.Time) ([]spaggiari.AgendaEntry, error) {
	ret := _m.Called(since, until)

	var r0 []spaggiari.AgendaEntry
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []spaggiari.AgendaEntry); ok {
		r0 = rf(since, until)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spaggiari.AgendaEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(since, until)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdapter creates a new instance of Adapter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t testing.TB) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
