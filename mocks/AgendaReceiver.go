// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
	spaggiari "github.com/zmoog/classeviva/adapters/spaggiari"
)

// AgendaReceiver is an autogenerated mock type for the AgendaReceiver type
type AgendaReceiver struct {
	mock.Mock
}

// List provides a mock function with given fields: since, until
func (_m *AgendaReceiver) List(since time.Time, until time.Time) ([]spaggiari.AgendaEntry, error) {
	ret := _m.Called(since, until)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []spaggiari.AgendaEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]spaggiari.AgendaEntry, error)); ok {
		return rf(since, until)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []spaggiari.AgendaEntry); ok {
		r0 = rf(since, until)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]spaggiari.AgendaEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(since, until)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAgendaReceiver creates a new instance of AgendaReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgendaReceiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgendaReceiver {
	mock := &AgendaReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
